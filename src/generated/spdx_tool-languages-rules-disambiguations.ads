--  Generated by spdx_tool-genrules.adb
--  SPDX-License-Identifier: Apache-2.0
package SPDX_Tool.Languages.Rules.Disambiguations is

   Definition  : constant Rules_List;

private

   S1 : aliased constant String := "![\w\s]+methodsFor: ";
   S2 : aliased constant String := """openapi"":\s?""3.[0-9.]+""";
   S3 : aliased constant String := """swagger"":\s?""2.[0-9.]+""";
   S4 : aliased constant String := "# Microsoft Developer Studio Generated Bu"
       & "ild File";
   S5 : aliased constant String := "#include|#pragma\s+(rs|version)|__attribu"
       & "te__";
   S6 : aliased constant String := "&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM "
       & "_DEFINITIONS";
   S7 : aliased constant String := "( |\()(Access|Excel|Outlook|PowerPoint|Vi"
       & "sio|Word|VBIDE)\.\w";
   S8 : aliased constant String := "(#include\s+[""<](Types\.r|Carbon\/Carbon"
       & "\.r)["">])|((resource|data|type)\s+'[A-Za-z0-9]{4}'\s+((\(.*\)\s+){0,1"
       & "}){)";
   S9 : aliased constant String := "(([A-Z.][\w.]*:\{)|^\\(cd?|d|l|p|ts?) )";
   S10 : aliased constant String := "((^|[ \t])(vi|Vi(m))(m[<=>]?[0-9]+|m)?|[ "
       & "\t]ex)(:([ \t]*set?[ \t][^\r\n:]+:)|:([ \t]*set?[ \t]))(([ \t]*:[ \t]*"
       & "|[ \t])\w*([ \t]*=([^\\\s]|\\.)*)?)*[ \t:](filetype|ft|syntax)[ \t]*=("
       & "help)($|\s|:)";
   S11 : aliased constant String := "(<^\s*; |End Function)";
   S12 : aliased constant String := "(>\+>|>\+<)";
   S13 : aliased constant String := "(?im)\bmoveq(\.l)?\s+#(\$-?[0-9a-f]{1,3}|"
       & "%[0-1]{1,8}|-?[0-9]{1,3}),\s*d[0-7]\b";
   S14 : aliased constant String := "(?im)^\s*btst\b";
   S15 : aliased constant String := "(?im)^\s*dbra\b";
   S16 : aliased constant String := "(?im)^\s*move(\.[bwl])?\s+(sr|usp),\s*[^\"
       & "s]+";
   S17 : aliased constant String := "(?im)^\s*move[mp](\.[wl])?\b";
   S18 : aliased constant String := "(?im)^\s*move\.[bwl]\s+.*\b[ad]\d";
   S19 : aliased constant String := "(?im)^\s*movem\.[bwl]\b";
   S20 : aliased constant String := "(?x)\A" & ASCII.LF & "\[" & ASCII.LF & "("
       & "?<version>" & ASCII.LF & "  (" & ASCII.LF & "    [Aa]d[Bb]lock"
       & ASCII.LF & "    ([ \t][Pp]lus)?" & ASCII.LF & "    |" & ASCII.LF & " "
       & "   u[Bb]lock" & ASCII.LF & "    ([ \t][Oo]rigin)?" & ASCII.LF & " "
       & "   |" & ASCII.LF & "    [Aa]d[Gg]uard" & ASCII.LF & "  )"
       & ASCII.LF & "  ([ \t] \d+(\.\d+)*)?" & ASCII.LF & ")" & ASCII.LF & "("
       & ASCII.LF & "  [ \t]?;[ \t]?" & ASCII.LF & "  \g<version>" & ASCII.LF
       & ")*" & ASCII.LF & "\]";
   S21 : aliased constant String := "(ALTER\s+MODULE|MODE\s+DB2SQL|\bSYS(CAT|P"
       & "ROC)\.|ASSOCIATE\s+RESULT\s+SET|\bEND!\s*$)";
   S22 : aliased constant String := "(SELECT\s+[\w*,]+\s+FROM|(CREATE|ALTER|DR"
       & "OP)\s(DATABASE|SCHEMA|TABLE))";
   S23 : aliased constant String := "([\/\\].*:\s+.*\s\\$|: \\$|^[ %]:|^[\w\s\"
       & "/\\.]+\w+\.\w+\s*:\s+[\w\s\/\\.]+\w+\.\w+)";
   S24 : aliased constant String := "(\$\$PLSQL_|XMLTYPE|systimestamp|\.nextva"
       & "l|CONNECT\s+BY|AUTHID\s+(DEFINER|CURRENT_USER)|constructor\W+function)";
   S25 : aliased constant String := "(\^(this|super)\.|^\s*(~\w+\s*=\.|SynthDe"
       & "f\b))";
   S26 : aliased constant String := "(\^(this|super)\.|^\s*~\w+\s*=\.)";
   S27 : aliased constant String := "(\bRebol\b)";
   S28 : aliased constant String := "(\w+\.prototype\.\w+|===|\bvar\b)";
   S29 : aliased constant String := "(^[-A-Za-z0-9=#!\*\[|>])|<\/";
   S30 : aliased constant String := "(^\.!|^\f|\f$|^\.end lit(eral)?\b|^\.[a-z"
       & "A-Z].*?;\.[a-zA-Z]([; \t])|\^\*[^\s*][^*]*\\\*($|\s)|^\.c;[ \t]*\w+)";
   S31 : aliased constant String := "(^\\i\b|AS\s+\$\$|LANGUAGE\s+'?plpgsql'?|"
       & "BEGIN(\s+WORK)?\s*;)";
   S32 : aliased constant String := "(^\s*(<\?xml|xmlns))";
   S33 : aliased constant String := "(^\s*(^function\s)(function\s*\w+\(.*?\)\"
       & "s*as\s*\w*)|(:\s*function\(.*?\)\s*as\s*\w*)$)";
   S34 : aliased constant String := "(^\s*(^sub\s)(sub\s*\w+\(.*?\))|(:\s*sub\"
       & "(.*?\))$)";
   S35 : aliased constant String := "(^\s*(end\sfunction)$)";
   S36 : aliased constant String := "(^\s*(end\ssub)$)";
   S37 : aliased constant String := "(^\s*(graph|node)\s+\[$)";
   S38 : aliased constant String := "(^\s*<\?xml\s+version)";
   S39 : aliased constant String := "(^\s*GO\b|BEGIN(\s+TRY|\s+CATCH)|OUTPUT\s"
       & "+INSERTED|DECLARE\s+@|\[dbo\])";
   S40 : aliased constant String := "(^\s*\{\$(mode|ifdef|undef|define)[ ]+[a-"
       & "z0-9_]+\})";
   S41 : aliased constant String := "(^\s*import (scala|java)\.|^\s*class\b)";
   S42 : aliased constant String := "(^\s*module)|let rec |match\s+(\S+\s)+wit"
       & "h";
   S43 : aliased constant String := "(^\|\s*(where|extend|project|limit|summar"
       & "ize))|(^\.\w+)";
   S44 : aliased constant String := "(^|<)\s*[A-Za-z0-9_]+\s*=\s*<";
   S45 : aliased constant String := "(^|\s)(Proof|Qed)\.($|\s)|(^|\s)Require[ "
       & "\t]+(Import|Export)\s";
   S46 : aliased constant String := "(m)^\s*#include\s+"".*"";\s*$";
   S47 : aliased constant String := "(m)^\s*using\s+(System|Beefy)(\.(.*))?;\s"
       & "*$";
   S48 : aliased constant String := ":- module";
   S49 : aliased constant String := ":=";
   S50 : aliased constant String := "<!ENTITY ";
   S51 : aliased constant String := "<%[@!=\s]?\s*(taglib|tag|include|attribut"
       & "e|variable)\s";
   S52 : aliased constant String := "<-|^\s*#";
   S53 : aliased constant String := "<TS\b";
   S54 : aliased constant String := "<\?[^h]";
   S55 : aliased constant String := "<\?hh";
   S56 : aliased constant String := "<emu-(alg|annex|biblio|clause|eqn|example"
       & "|figure|gann|gmod|gprose|grammar|intro|not-ref|note|nt|prodref|product"
       & "ion|rhs|table|t|xref)($|\s|>)";
   S57 : aliased constant String := "=> |case\s+(\S+\s)+of";
   S58 : aliased constant String := "AC_DEFUN|AC_PREREQ|AC_INIT";
   S59 : aliased constant String := "HEADERS";
   S60 : aliased constant String := "OUTPUT_ARCH\(|OUTPUT_FORMAT\(|SECTIONS";
   S61 : aliased constant String := "SOURCES";
   S62 : aliased constant String := "THE_TITLE";
   S63 : aliased constant String := "[\s$][^\W\d]\w*(:\w+)*->[a-zA-Z_\[({]";
   S64 : aliased constant String := "\""modelName\""\:\s*\""GM";
   S65 : aliased constant String := "\$(if|else)[ \t]|^[ \t]*fn\s+[^\s()]+\(.*"
       & "?\).*?\{|^[ \t]*for\s*\{";
   S66 : aliased constant String := "\$\w+[($]|(.)!\s*.+?\s*!\1|<!\s*.+?\s*!>|"
       & "\[!\s*.+?\s*!\]|\{!\s*.+?\s*!\}";
   S67 : aliased constant String := "\((def|defn|defmacro|let)\s";
   S68 : aliased constant String := "\(\*";
   S69 : aliased constant String := "\(def(un|macro)\s";
   S70 : aliased constant String := "\*\)$";
   S71 : aliased constant String := "\/\* |\/\/ |^\}";
   S72 : aliased constant String := "\/\/|(""|')use strict\1|export\s+default\"
       & "s|\/\*(.|[\r\n])*?\*\/";
   S73 : aliased constant String := "\A\s*[\[{(^""'\w#]|[a-zA-Z_]\w*\s*:=\s*[a"
       & "-zA-Z_]\w*|class\s*>>\s*[a-zA-Z_]\w*|^[a-zA-Z_]\w*\s+[a-zA-Z_]\w*:|^Cl"
       & "ass\s*\{|if(True|False):\s*\[";
   S74 : aliased constant String := "\A\s*[{\[]";
   S75 : aliased constant String := "\A\s*\d";
   S76 : aliased constant String := "\A\s*solid($|\s)[\s\S]*^endsolid($|\s)";
   S77 : aliased constant String := "\A\z";
   S78 : aliased constant String := "\b((Active)?VBProjects?|VBComponents?|App"
       & "lication\.(VBE|ScreenUpdating))\b";
   S79 : aliased constant String := "\b((CODEUNIT|PAGE|PAGEEXTENSION|PAGECUSTO"
       & "MIZATION|DOTNET|ENUM|ENUMEXTENSION|VALUE|QUERY|REPORT|TABLE|TABLEEXTEN"
       & "SION|XMLPORT|PROFILE|CONTROLADDIN|REPORTEXTENSION|INTERFACE|PERMISSION"
       & "SET|PERMISSIONSETEXTENSION|ENTITLEMENT))\b";
   S80 : aliased constant String := "\b((This|Active)?Workbooks?|Worksheets?|A"
       & "ctive(Sheet|Chart|Cell)|WorksheetFunction)\b";
   S81 : aliased constant String := "\b(Range\("".*|Cells\([0-9a-zA-Z_]*, ([0-"
       & "9a-zA-Z_]*|""[a-zA-Z]{1,3}""))\)";
   S82 : aliased constant String := "\b(ThisDrawing|AcadObject|Active(Explorer"
       & "|Inspector|Window\.Presentation|Presentation|Document)|Selection\.(Fin"
       & "d|Paragraphs))\b";
   S83 : aliased constant String := "\b(VBA|[vV]ba)(\b|[0-9A-Z_])";
   S84 : aliased constant String := "\b(level|self)[ \t]+thread[ \t]+(\[\[[ \t"
       & "]*(\w+\.)*\w+[ \t]*\]\]|\w+)[ \t]*\([^\r\n\)]*\)[ \t]*;";
   S85 : aliased constant String := "\b(program|version)\s+\w+\s*\{|\bunion\s+"
       & "\w+\s+switch\s*\(";
   S86 : aliased constant String := "\b(using|module|function|class|var)\s+\w";
   S87 : aliased constant String := "\bpragma\s+solidity\b|\b(abstract\s+)?con"
       & "tract\s+(\d)[a-zA-Z0-9$_]+(\s+is\s+([a-zA-Z0-9$_][^\{]*?)?)?\s*\{";
   S88 : aliased constant String := "\bprocess\s*[(=]|\b(library|import)\s*\(\"
       & "s*""|\bdeclare\s+(name|version|author|copyright|license)\s+""";
   S89 : aliased constant String := "\buse\s+(strict\b|v?5\b)";
   S90 : aliased constant String := "\s*(Declare|BindGlobal|KeyDependentOperat"
       & "ion)";
   S91 : aliased constant String := "\s*(Declare|BindGlobal|KeyDependentOperat"
       & "ion|Install(Method|GlobalFunction)|SetPackageInfo)";
   S92 : aliased constant String := "\s*(extends|var|const|enum|func|class|sig"
       & "nal|tool|yield|assert|onready)";
   S93 : aliased constant String := "\sfprintf\s*\(";
   S94 : aliased constant String := "^## |@no-lib-strip@";
   S95 : aliased constant String := "^#(import|show|let|set)";
   S96 : aliased constant String := "^#+\s+(NAME|SYNOPSIS|DESCRIPTION)";
   S97 : aliased constant String := "^#version\s+[0-9]+\b";
   S98 : aliased constant String := "^%(end|ctor|hook|group)\b";
   S99 : aliased constant String := "^(# |include|require|inherit)\b";
   S100 : aliased constant String := "^(%[%{}]xs|<.*>)";
   S101 : aliased constant String := "^((\/{2,3})?\s*(namespace|operation)\b)";
   S102 : aliased constant String := "^(----[- ]BEGIN|ssh-(rsa|dss)) ";
   S103 : aliased constant String := "^(: |also |new-device|previous )";
   S104 : aliased constant String := "^(: |new-device)";
   S105 : aliased constant String := "^(;;|\(define_)";
   S106 : aliased constant String := "^(<pre\s+class)\s*=\s*('|\""|\b)metadata\"
       & "b\1[^>\r\n]*>";
   S107 : aliased constant String := "^(<|[a-zA-Z-][a-zA-Z0-9_-]+[ \t]+\w)|\$\{"
       & "\w+[^\r\n]*?\}|^[ \t]*(<#--.*->|<#([a-z]+)(\s|>)[^>]*>.*?</#\1>|\[#--."
       & "*-\]|\[#([a-z]+)(\s|\])[^\]]*\].*?\[#\2\])";
   S108 : aliased constant String := "^([c*][^abd-z]|      (subroutine|program|"
       & "end|data)\s|\s*!)";
   S109 : aliased constant String := "^(\/\/.+|((import|export)\s+)?(function|i"
       & "nt|float|char)\s+((room|repeatedly|on|game)_)?([A-Za-z]+[A-Za-z_0-9]+)"
       & "\s*[;\(])";
   S110 : aliased constant String := "^(\d{2}:\d{2}:\d{2},\d{3})\s*(-->)\s*(\d{"
       & "2}:\d{2}:\d{2},\d{3})$";
   S111 : aliased constant String := "^(\s*)(<Project|<Import|<Property|<?xml|x"
       & "mlns)";
   S112 : aliased constant String := "^(\w+:\w*:\w*:\w*|BEGIN|END|provider\s+|("
       & "tick|profile)-\w+\s+\{[^}]*\}|#pragma\s+D\s+(option|attributes|depends"
       & "_on)\s|#pragma\s+ident\s)";
   S113 : aliased constant String := "^(b|g)[0-9]+ ";
   S114 : aliased constant String := "^(import|from|class|def)\s";
   S115 : aliased constant String := "^(module|namespace|using)\s";
   S116 : aliased constant String := "^(use |fn |mod |pub |macro_rules|impl|#!?"
       & "\[)";
   S117 : aliased constant String := "^-(include\b.*\.pro$|keep\b|keepclassmemb"
       & "ers\b|keepattributes\b)";
   S118 : aliased constant String := "^-?[a-zA-Z][a-zA-Z0-9_-]* *=|\{\$-?[a-zA-"
       & "Z][-\w]*(\.[a-zA-Z][-\w]*)?\}";
   S119 : aliased constant String := "^: ";
   S120 : aliased constant String := "^<\?(php)?";
   S121 : aliased constant String := "^@(<|\w+\.)";
   S122 : aliased constant String := "^Class\s";
   S123 : aliased constant String := "^G0.";
   S124 : aliased constant String := "^SymbolType[ \t]";
   S125 : aliased constant String := "^UseVimball";
   S126 : aliased constant String := "^[ \t]*#(define|endif|endmacro|ifn?def|if"
       & "|include|lang|macro)($|\s)";
   S127 : aliased constant String := "^[ \t]*#(define|endif|endmacro|ifn?def|in"
       & "clude|lang|macro)($|\s)";
   S128 : aliased constant String := "^[ \t]*#[ \t]*(precache|using_animtree)[ "
       & "\t]*\(";
   S129 : aliased constant String := "^[ \t]*%[a-z_]+\b|^%[{}]$";
   S130 : aliased constant String := "^[ \t]*(\/\*\s*)?MessageId=|^\.$";
   S131 : aliased constant String := "^[ \t]*(class|(using[ \t]+)?namespace)\s+"
       & "\w+";
   S132 : aliased constant String := "^[ \t]*(private|public|protected):$";
   S133 : aliased constant String := "^[ \t]*(try|constexpr)";
   S134 : aliased constant String := "^[ \t]*catch\s*\(";
   S135 : aliased constant String := "^[ \t]*module\s+[^\s()]+\s+\#?\(|^[ \t]*`"
       & "(define|ifdef|ifndef|include|timescale)|^[ \t]*always[ \t]+@|^[ \t]*in"
       & "itial[ \t]+(begin|@)";
   S136 : aliased constant String := "^[ ]*#If Win64\b";
   S137 : aliased constant String := "^[ ]*(Dim|Const) [0-9a-zA-Z_]*[ ]*As Long"
       & "(Ptr|Long)\b";
   S138 : aliased constant String := "^[ ]*(Public|Private)? Declare PtrSafe (S"
       & "ub|Function)\b";
   S139 : aliased constant String := "^[ ]*Attribute VB_Name = ";
   S140 : aliased constant String := "^[ ]*Option (Private Module|Compare (Data"
       & "base|Text|Binary))\b";
   S141 : aliased constant String := "^[ ]*VERSION [0-9]\.[0-9] CLASS";
   S142 : aliased constant String := "^[ ]*VERSION [0-9]\.[0-9]{2}";
   S143 : aliased constant String := "^[#!]";
   S144 : aliased constant String := "^[.']";
   S145 : aliased constant String := "^[.'][ \t]*Dd +([^""\s]+|""[^""]+"")";
   S146 : aliased constant String := "^[.'][ \t]*Dt +([^""\s]+|""[^""]+"") +""?"
       & "([1-9]|@[^\s@]+@)";
   S147 : aliased constant String := "^[.'][ \t]*SH +([^""\s]+|""[^""\s]+)";
   S148 : aliased constant String := "^[.'][ \t]*Sh +([^""\s]|""[^""]+"")";
   S149 : aliased constant String := "^[.'][ \t]*TH +([^""\s]+|""[^""]+"") +""?"
       & "([1-9]|@[^\s@]+@)";
   S150 : aliased constant String := "^[.'][A-Za-z]{2}(\s|$)";
   S151 : aliased constant String := "^[;\[]";
   S152 : aliased constant String := "^[=-]+\s|\{\{[A-Za-z]";
   S153 : aliased constant String := "^[DGMT][0-9]{2}\*$";
   S154 : aliased constant String := "^[DGMT][0-9]{2}\*(\r?\n|\r)";
   S155 : aliased constant String := "^[MG][0-9]+(\r?\n|\r)";
   S156 : aliased constant String := "^[\s&&[^\r\n]]*=(comment|begin pod|begin "
       & "para|item\d+)";
   S157 : aliased constant String := "^[^#!;][^=]*=";
   S158 : aliased constant String := "^[^#!][^:]*:";
   S159 : aliased constant String := "^[^#]*:-";
   S160 : aliased constant String := "^[^#]+:-";
   S161 : aliased constant String := "^[^\[#]+:-";
   S162 : aliased constant String := "^\((de|class|rel|code|data|must)\s";
   S163 : aliased constant String := "^\.([A-Za-z]{2}(\s|$)|\\"")";
   S164 : aliased constant String := "^\.[A-Za-z]{2}(\s|$)";
   S165 : aliased constant String := "^\.\\"" ";
   S166 : aliased constant String := "^\[InternetShortcut\](\r?\n|\r)([^\s\[][^"
       & "\r\n]*(\r?\n|\r))*URL=";
   S167 : aliased constant String := "^\[indent=[0-9]+\]";
   S168 : aliased constant String := "^\\(contentsline|defcounter|beamer|boolfa"
       & "lse)";
   S169 : aliased constant String := "^\\.{0,10}TLV_version";
   S170 : aliased constant String := "^\s*#((if|ifdef|define|pragma)\s+\w|\s*in"
       & "clude\s+<[^>]+>)";
   S171 : aliased constant String := "^\s*#(declare|local|macro|while)\s";
   S172 : aliased constant String := "^\s*#\s*(if|ifdef|ifndef|define|command|x"
       & "command|translate|xtranslate|include|pragma|undef)\b";
   S173 : aliased constant String := "^\s*#\s*(using|insert|include|define|name"
       & "space)[ \t]+\w";
   S174 : aliased constant String := "^\s*#\s*include <(cstdint|string|vector|m"
       & "ap|list|array|bitset|queue|stack|forward_list|unordered_map|unordered_"
       & "set|(i|o|io)stream)>";
   S175 : aliased constant String := "^\s*%";
   S176 : aliased constant String := "^\s*%[ \t]+|^\s*var\s+\w+(\s*:\s*\w+)?\s*"
       & ":=\s*\w+";
   S177 : aliased constant String := "^\s*(#light|import|let|module|namespace|o"
       & "pen|type)";
   S178 : aliased constant String := "^\s*(#version|precision|uniform|varying|v"
       & "ec[234])";
   S179 : aliased constant String := "^\s*(%%|main\s*\(.*?\)\s*->)";
   S180 : aliased constant String := "^\s*((abi|dep|fn|impl|mod|pub|trait)\s|#\"
       & "[)";
   S181 : aliased constant String := "^\s*((autoexec|private)\s+){0,2}function\"
       & "s+((autoexec|private)\s+){0,2}\w+\s*\(";
   S182 : aliased constant String := "^\s*((public|export|global)\s+)?(atom|con"
       & "stant|enum|function|integer|object|procedure|sequence|type)\s";
   S183 : aliased constant String := "^\s*(<\?xml\s|<!DOCTYPE\s+plist|<plist(\s"
       & "+version\s*=\s*([""'])\d+(\.\d+)?\1)?\s*>\s*$)";
   S184 : aliased constant String := "^\s*(@(interface|class|protocol|property|"
       & "end|synchronised|selector|implementation)\b|#import\s+.+\.h["">])";
   S185 : aliased constant String := "^\s*(MODULE|END) [\w\.]+;";
   S186 : aliased constant String := "^\s*(\*|(our\s*)?@)EXPORT\s*=";
   S187 : aliased constant String := "^\s*(across|deferred|elseif|ensure|featur"
       & "e|from|inherit|inspect|invariant|note|once|require|undefine|variant|wh"
       & "en)\s*$";
   S188 : aliased constant String := "^\s*(alias|def|from|fn|import|struct|trai"
       & "t)\s";
   S189 : aliased constant String := "^\s*(cond|import|quote|unless)\s";
   S190 : aliased constant String := "^\s*(def|to)\s+(\w+)(\(.+\))?\s+\{";
   S191 : aliased constant String := "^\s*(def|var)\s+(.+):=";
   S192 : aliased constant String := "^\s*(function|pro|compile_opt) \w[ \w,:]*"
       & "$";
   S193 : aliased constant String := "^\s*(global|local)_var\s+(\w+(\s*=\s*[\w\"
       & "-""']+)?\s*)(,\s*\w+(\s*=\s*[\w\-""']+)?\s*)*\s*;";
   S194 : aliased constant String := "^\s*(import.+(from\s+|require\()['""]reac"
       & "t|\/\/\/\s*<reference\s)";
   S195 : aliased constant String := "^\s*(import|export|module|def|let|let-env"
       & ") ";
   S196 : aliased constant String := "^\s*(import|module|package|data|type) ";
   S197 : aliased constant String := "^\s*(include|open)\s+\w+\s*$";
   S198 : aliased constant String := "^\s*(include|open)\s+\w+\s*;\s*$";
   S199 : aliased constant String := "^\s*(let|module|type)\s+\w*\s+=\s+";
   S200 : aliased constant String := "^\s*(package(\s+[\w.]+)?\s+(\{|$)|import\"
       & "s+[\w.*]+\s*;|(.*?(intrinsic|extends))(intrinsic\s+)?class\s+[\w<>.]+("
       & "\s+extends\s+[\w<>.]+)?|((public|protected|private|static)\s+)*((var|c"
       & "onst|local)\s+\w+\s*:\s*[\w<>.]+(\s*=.*)?\s*;|function\s+\w+\s*\((\s*\"
       & "w+\s*:\s*[\w<>.]+\s*(,\s*\w+\s*:\s*[\w<>.]+\s*)*)?\)))";
   S201 : aliased constant String := "^\s*(public\s+)?include\s";
   S202 : aliased constant String := "^\s*(public\s+|private\s+|\s*)function\s+"
       & "\w+\s*\([\w\s,]*\)\s*\{";
   S203 : aliased constant String := "^\s*(use\s+v6\b|\bmodule\b|\b(my\s+)?clas"
       & "s\b)";
   S204 : aliased constant String := "^\s*(use\s+v6\b|\bmodule\b|\bmy\s+class\b"
       & ")";
   S205 : aliased constant String := "^\s*(using\s+[A-Z][\s\w.]+;|namespace\s*["
       & "\w\.]+\s*(\{|;)|\/\/)";
   S206 : aliased constant String := "^\s*(when)\s+(\(.+\))\s+->\s+\{";
   S207 : aliased constant String := "^\s*:-";
   S208 : aliased constant String := "^\s*;";
   S209 : aliased constant String := "^\s*<\?xml";
   S210 : aliased constant String := "^\s*<\?xml\s+version";
   S211 : aliased constant String := "^\s*@moduledoc\s";
   S212 : aliased constant String := "^\s*BEGIN(\r?\n|\r)\s*MultiUse\s*=.*(\r?\"
       & "n|\r)\s*Persistable\s*=";
   S213 : aliased constant String := "^\s*Begin\s+VB\.Form\s+";
   S214 : aliased constant String := "^\s*Begin\s+\{[0-9A-Z\-]*\}\s?";
   S215 : aliased constant String := "^\s*MarkNativeAsOptional\s*\(";
   S216 : aliased constant String := "^\s*\((defun|in-package|defpackage) ";
   S217 : aliased constant String := "^\s*\(define ";
   S218 : aliased constant String := "^\s*\.(include\s|globa?l\s|[A-Za-z][_A-Za"
       & "-z0-9]*:)";
   S219 : aliased constant String := "^\s*\/\* XPM \*\/";
   S220 : aliased constant String := "^\s*\\(NeedsTeXFormat|ProvidesClass)\{";
   S221 : aliased constant String := "^\s*\w+\s*(,\s*\w+)*[:]\s*\w+\s";
   S222 : aliased constant String := "^\s*\w+\s*(\(\s*\w+[:][^)]+\))?([:]\s*\w+"
       & ")?(--.+\s+)*\s+(do|local)\s";
   S223 : aliased constant String := "^\s*def(exception|impl|macro|module|proto"
       & "col)[(\s]";
   S224 : aliased constant String := "^\s*end[.;]";
   S225 : aliased constant String := "^\s*end[.;]\s*$";
   S226 : aliased constant String := "^\s*include\s*\(\s*(""|')[\\/\w\-\.:\s]+\"
       & ".(nasl|inc)\s*(""|')\s*\)\s*;";
   S227 : aliased constant String := "^\s*let\s+(module\s\w+\s*=\s*\{|\w+:\s+.*"
       & "=.*;\s*$)";
   S228 : aliased constant String := "^\s*module\s+type\s";
   S229 : aliased constant String := "^\s*namespace\s";
   S230 : aliased constant String := "^\s*namespace\s+\w+\s*\{";
   S231 : aliased constant String := "^\s*object\s+\w+\s*(extends\s+\w+(::\w+)?"
       & ")?\s*\{";
   S232 : aliased constant String := "^\s*package\s*[\w\.\/\*\s]*\s*\{";
   S233 : aliased constant String := "^\s*package\s+[^\W\d]\w*(::\w+)*\s*([;{]|"
       & "\sv?\d)";
   S234 : aliased constant String := "^\s*template\s*<";
   S235 : aliased constant String := "^\s*use\s+(constant|overload)\b";
   S236 : aliased constant String := "^\s+\w+\s+=>\s";
   S237 : aliased constant String := "^\t+.*?[^\s:].*?:";
   S238 : aliased constant String := "^\w+\s*:\s*module\s*\{";
   S239 : aliased constant String := "^\{\s*(application|'application')\s*,\s*("
       & "[a-z]+[\w@]*|'[^']+')\s*,\s*\[(.|[\r\n])*\]\s*\}\.[ \t]*$";
   S240 : aliased constant String := "^_?m4_";
   S241 : aliased constant String := "^class";
   S242 : aliased constant String := "^dnl|^divert\((-?\d+)?\)|^\w+\(`[^\r\n]*?"
       & "'[),]";
   S243 : aliased constant String := "^import [A-Z]";
   S244 : aliased constant String := "^import [a-z]";
   S245 : aliased constant String := "^inherit(\s+[\w.-]+)+\s*$";
   S246 : aliased constant String := "^loop_\s*$";
   S247 : aliased constant String := "^methodmap\s+\w+\s+<\s+\w+";
   S248 : aliased constant String := "^module\s+[\w.]*\s*;|import\s+[\w\s,.:]*;"
       & "|\w+\s+\w+\s*\(.*\)(\(.*\))?\s*\{[^}]*\}|unittest\s*(\(.*\))?\s*\{[^}]"
       & "*\}";
   S249 : aliased constant String := "^package\s+[A-Za-z_][A-Za-z0-9_']*(\s*\(|"
       & "\s+where)";
   S250 : aliased constant String := "^public\s+(SharedPlugin(\s+|:)__pl_\w+\s*"
       & "=(\s*\{)?|(void\s+)?__pl_\w+_SetNTVOptional\(\)(\s*\{)?)";
   S251 : aliased constant String := "^s?plot\b";
   S252 : aliased constant String := "^set\s+(term|terminal|out|output|[xy]tics"
       & "|[xy]label|[xy]range|style)\b";
   S253 : aliased constant String := "^uses (java|gw)\.";
   S254 : aliased constant String := "^xof 030(2|3)(txt|bin|tzip|bzip)\b";
   S255 : aliased constant String := "__has_cpp_attribute|__cplusplus >";
   S256 : aliased constant String := "flowop";
   S257 : aliased constant String := "gap> ";
   S258 : aliased constant String := "last_client=";
   S259 : aliased constant String := "openapi:\s?'?""?3.[0-9.]+'?""?";
   S260 : aliased constant String := "package\s+\w+|\b(im|ex)port\s*""[\w:./]+"
       & """|\w+\s*::\s*(proc|struct)\s*\(|^\s*//\s";
   S261 : aliased constant String := "std::\w+";
   S262 : aliased constant String := "swagger:\s?'?""?2.[0-9.]+'?""?";
   S263 : aliased constant String := "tag:unity3d.com";
   S264 : aliased constant String := "<UTIL.BEANS.OBJECTS.VECTORS.VECTOR_BEAN>";
   S265 : aliased constant String := "AGS Script";
   S266 : aliased constant String := "AL";
   S267 : aliased constant String := "ActionScript";
   S268 : aliased constant String := "Adblock Filter List";
   S269 : aliased constant String := "AsciiDoc";
   S270 : aliased constant String := "Asymptote";
   S271 : aliased constant String := "BASIC";
   S272 : aliased constant String := "Beef";
   S273 : aliased constant String := "Bikeshed";
   S274 : aliased constant String := "BitBake";
   S275 : aliased constant String := "BlitzBasic";
   S276 : aliased constant String := "Bluespec BH";
   S277 : aliased constant String := "Brainfuck";
   S278 : aliased constant String := "BrighterScript";
   S279 : aliased constant String := "C";
   S280 : aliased constant String := "C#";
   S281 : aliased constant String := "C++";
   S282 : aliased constant String := "CWeb";
   S283 : aliased constant String := "Clojure";
   S284 : aliased constant String := "Common Lisp";
   S285 : aliased constant String := "Cool";
   S286 : aliased constant String := "Coq";
   S287 : aliased constant String := "D";
   S288 : aliased constant String := "DTrace";
   S289 : aliased constant String := "DirectX 3D File";
   S290 : aliased constant String := "E";
   S291 : aliased constant String := "ECL";
   S292 : aliased constant String := "ECLiPSe";
   S293 : aliased constant String := "Ecmarkup";
   S294 : aliased constant String := "Eiffel";
   S295 : aliased constant String := "Elixir";
   S296 : aliased constant String := "Erlang";
   S297 : aliased constant String := "Euphoria";
   S298 : aliased constant String := "F#";
   S299 : aliased constant String := "Faust";
   S300 : aliased constant String := "Filebench WML";
   S301 : aliased constant String := "Filterscript";
   S302 : aliased constant String := "Fluent";
   S303 : aliased constant String := "Forth";
   S304 : aliased constant String := "Fortran";
   S305 : aliased constant String := "FreeBasic";
   S306 : aliased constant String := "FreeMarker";
   S307 : aliased constant String := "Frege";
   S308 : aliased constant String := "G-code";
   S309 : aliased constant String := "GAP";
   S310 : aliased constant String := "GCC Machine Description";
   S311 : aliased constant String := "GDScript";
   S312 : aliased constant String := "GLSL";
   S313 : aliased constant String := "GSC";
   S314 : aliased constant String := "Game Maker Language";
   S315 : aliased constant String := "Genie";
   S316 : aliased constant String := "Gerber Image";
   S317 : aliased constant String := "Glimmer TS";
   S318 : aliased constant String := "Gnuplot";
   S319 : aliased constant String := "Gosu";
   S320 : aliased constant String := "Graph Modeling Language";
   S321 : aliased constant String := "HTML";
   S322 : aliased constant String := "Hack";
   S323 : aliased constant String := "HiveQL";
   S324 : aliased constant String := "HyPhy";
   S325 : aliased constant String := "IDL";
   S326 : aliased constant String := "INI";
   S327 : aliased constant String := "JSON";
   S328 : aliased constant String := "Java Properties";
   S329 : aliased constant String := "Java Server Pages";
   S330 : aliased constant String := "JavaScript";
   S331 : aliased constant String := "Kusto";
   S332 : aliased constant String := "LTspice Symbol";
   S333 : aliased constant String := "Lean";
   S334 : aliased constant String := "Lean 4";
   S335 : aliased constant String := "Lex";
   S336 : aliased constant String := "Limbo";
   S337 : aliased constant String := "Linker Script";
   S338 : aliased constant String := "LiveScript";
   S339 : aliased constant String := "Logos";
   S340 : aliased constant String := "LoomScript";
   S341 : aliased constant String := "M";
   S342 : aliased constant String := "M4";
   S343 : aliased constant String := "M4Sugar";
   S344 : aliased constant String := "MATLAB";
   S345 : aliased constant String := "MAXScript";
   S346 : aliased constant String := "MUF";
   S347 : aliased constant String := "Makefile";
   S348 : aliased constant String := "Markdown";
   S349 : aliased constant String := "Mathematica";
   S350 : aliased constant String := "Mercury";
   S351 : aliased constant String := "Microsoft Developer Studio Project";
   S352 : aliased constant String := "MiniYAML";
   S353 : aliased constant String := "Modula-2";
   S354 : aliased constant String := "Mojo";
   S355 : aliased constant String := "Monkey C";
   S356 : aliased constant String := "Motorola 68K Assembly";
   S357 : aliased constant String := "NASL";
   S358 : aliased constant String := "NL";
   S359 : aliased constant String := "Nemerle";
   S360 : aliased constant String := "NewLisp";
   S361 : aliased constant String := "Nu";
   S362 : aliased constant String := "Nushell";
   S363 : aliased constant String := "OASv2-json";
   S364 : aliased constant String := "OASv2-yaml";
   S365 : aliased constant String := "OASv3-json";
   S366 : aliased constant String := "OASv3-yaml";
   S367 : aliased constant String := "OCaml";
   S368 : aliased constant String := "Object Data Instance Notation";
   S369 : aliased constant String := "ObjectScript";
   S370 : aliased constant String := "Objective-C";
   S371 : aliased constant String := "Odin";
   S372 : aliased constant String := "OpenCL";
   S373 : aliased constant String := "OpenEdge ABL";
   S374 : aliased constant String := "OpenStep Property List";
   S375 : aliased constant String := "PHP";
   S376 : aliased constant String := "PLSQL";
   S377 : aliased constant String := "PLpgSQL";
   S378 : aliased constant String := "POV-Ray SDL";
   S379 : aliased constant String := "Pascal";
   S380 : aliased constant String := "Perl";
   S381 : aliased constant String := "PicoLisp";
   S382 : aliased constant String := "Pod";
   S383 : aliased constant String := "Pod 6";
   S384 : aliased constant String := "Proguard";
   S385 : aliased constant String := "Prolog";
   S386 : aliased constant String := "Public Key";
   S387 : aliased constant String := "Puppet";
   S388 : aliased constant String := "Python";
   S389 : aliased constant String := "Q#";
   S390 : aliased constant String := "QMake";
   S391 : aliased constant String := "Qt Script";
   S392 : aliased constant String := "R";
   S393 : aliased constant String := "RPC";
   S394 : aliased constant String := "RUNOFF";
   S395 : aliased constant String := "Raku";
   S396 : aliased constant String := "ReScript";
   S397 : aliased constant String := "Reason";
   S398 : aliased constant String := "Rebol";
   S399 : aliased constant String := "Ren'Py";
   S400 : aliased constant String := "RenderScript";
   S401 : aliased constant String := "Rez";
   S402 : aliased constant String := "Roff";
   S403 : aliased constant String := "Roff Manpage";
   S404 : aliased constant String := "Rust";
   S405 : aliased constant String := "SQL";
   S406 : aliased constant String := "SQLPL";
   S407 : aliased constant String := "STAR";
   S408 : aliased constant String := "STL";
   S409 : aliased constant String := "SWIG";
   S410 : aliased constant String := "Scala";
   S411 : aliased constant String := "Scilab";
   S412 : aliased constant String := "Slice";
   S413 : aliased constant String := "Smalltalk";
   S414 : aliased constant String := "Solidity";
   S415 : aliased constant String := "SourcePawn";
   S416 : aliased constant String := "Standard ML";
   S417 : aliased constant String := "Starlark";
   S418 : aliased constant String := "StringTemplate";
   S419 : aliased constant String := "SubRip Text";
   S420 : aliased constant String := "SuperCollider";
   S421 : aliased constant String := "Sway";
   S422 : aliased constant String := "TL-Verilog";
   S423 : aliased constant String := "TSQL";
   S424 : aliased constant String := "TSX";
   S425 : aliased constant String := "TeX";
   S426 : aliased constant String := "Text";
   S427 : aliased constant String := "Turing";
   S428 : aliased constant String := "TypeScript";
   S429 : aliased constant String := "Typst";
   S430 : aliased constant String := "Unity3D Asset";
   S431 : aliased constant String := "Unix Assembly";
   S432 : aliased constant String := "V";
   S433 : aliased constant String := "VBA";
   S434 : aliased constant String := "Verilog";
   S435 : aliased constant String := "Vim Help File";
   S436 : aliased constant String := "Vim Script";
   S437 : aliased constant String := "Visual Basic 6.0";
   S438 : aliased constant String := "Win32 Message File";
   S439 : aliased constant String := "World of Warcraft Addon Data";
   S440 : aliased constant String := "X PixMap";
   S441 : aliased constant String := "XML";
   S442 : aliased constant String := "XML Property List";
   S443 : aliased constant String := "YAML";
   S444 : aliased constant String := "Yacc";
   S445 : aliased constant String := "q";
   S446 : aliased constant String := "xBase";

   Strings : aliased constant String_Array_Access := (
      S1'Access, S2'Access, S3'Access, S4'Access,
      S5'Access, S6'Access, S7'Access, S8'Access,
      S9'Access, S10'Access, S11'Access, S12'Access,
      S13'Access, S14'Access, S15'Access, S16'Access,
      S17'Access, S18'Access, S19'Access, S20'Access,
      S21'Access, S22'Access, S23'Access, S24'Access,
      S25'Access, S26'Access, S27'Access, S28'Access,
      S29'Access, S30'Access, S31'Access, S32'Access,
      S33'Access, S34'Access, S35'Access, S36'Access,
      S37'Access, S38'Access, S39'Access, S40'Access,
      S41'Access, S42'Access, S43'Access, S44'Access,
      S45'Access, S46'Access, S47'Access, S48'Access,
      S49'Access, S50'Access, S51'Access, S52'Access,
      S53'Access, S54'Access, S55'Access, S56'Access,
      S57'Access, S58'Access, S59'Access, S60'Access,
      S61'Access, S62'Access, S63'Access, S64'Access,
      S65'Access, S66'Access, S67'Access, S68'Access,
      S69'Access, S70'Access, S71'Access, S72'Access,
      S73'Access, S74'Access, S75'Access, S76'Access,
      S77'Access, S78'Access, S79'Access, S80'Access,
      S81'Access, S82'Access, S83'Access, S84'Access,
      S85'Access, S86'Access, S87'Access, S88'Access,
      S89'Access, S90'Access, S91'Access, S92'Access,
      S93'Access, S94'Access, S95'Access, S96'Access,
      S97'Access, S98'Access, S99'Access, S100'Access,
      S101'Access, S102'Access, S103'Access, S104'Access,
      S105'Access, S106'Access, S107'Access, S108'Access,
      S109'Access, S110'Access, S111'Access, S112'Access,
      S113'Access, S114'Access, S115'Access, S116'Access,
      S117'Access, S118'Access, S119'Access, S120'Access,
      S121'Access, S122'Access, S123'Access, S124'Access,
      S125'Access, S126'Access, S127'Access, S128'Access,
      S129'Access, S130'Access, S131'Access, S132'Access,
      S133'Access, S134'Access, S135'Access, S136'Access,
      S137'Access, S138'Access, S139'Access, S140'Access,
      S141'Access, S142'Access, S143'Access, S144'Access,
      S145'Access, S146'Access, S147'Access, S148'Access,
      S149'Access, S150'Access, S151'Access, S152'Access,
      S153'Access, S154'Access, S155'Access, S156'Access,
      S157'Access, S158'Access, S159'Access, S160'Access,
      S161'Access, S162'Access, S163'Access, S164'Access,
      S165'Access, S166'Access, S167'Access, S168'Access,
      S169'Access, S170'Access, S171'Access, S172'Access,
      S173'Access, S174'Access, S175'Access, S176'Access,
      S177'Access, S178'Access, S179'Access, S180'Access,
      S181'Access, S182'Access, S183'Access, S184'Access,
      S185'Access, S186'Access, S187'Access, S188'Access,
      S189'Access, S190'Access, S191'Access, S192'Access,
      S193'Access, S194'Access, S195'Access, S196'Access,
      S197'Access, S198'Access, S199'Access, S200'Access,
      S201'Access, S202'Access, S203'Access, S204'Access,
      S205'Access, S206'Access, S207'Access, S208'Access,
      S209'Access, S210'Access, S211'Access, S212'Access,
      S213'Access, S214'Access, S215'Access, S216'Access,
      S217'Access, S218'Access, S219'Access, S220'Access,
      S221'Access, S222'Access, S223'Access, S224'Access,
      S225'Access, S226'Access, S227'Access, S228'Access,
      S229'Access, S230'Access, S231'Access, S232'Access,
      S233'Access, S234'Access, S235'Access, S236'Access,
      S237'Access, S238'Access, S239'Access, S240'Access,
      S241'Access, S242'Access, S243'Access, S244'Access,
      S245'Access, S246'Access, S247'Access, S248'Access,
      S249'Access, S250'Access, S251'Access, S252'Access,
      S253'Access, S254'Access, S255'Access, S256'Access,
      S257'Access, S258'Access, S259'Access, S260'Access,
      S261'Access, S262'Access, S263'Access, S264'Access,
      S265'Access, S266'Access, S267'Access, S268'Access,
      S269'Access, S270'Access, S271'Access, S272'Access,
      S273'Access, S274'Access, S275'Access, S276'Access,
      S277'Access, S278'Access, S279'Access, S280'Access,
      S281'Access, S282'Access, S283'Access, S284'Access,
      S285'Access, S286'Access, S287'Access, S288'Access,
      S289'Access, S290'Access, S291'Access, S292'Access,
      S293'Access, S294'Access, S295'Access, S296'Access,
      S297'Access, S298'Access, S299'Access, S300'Access,
      S301'Access, S302'Access, S303'Access, S304'Access,
      S305'Access, S306'Access, S307'Access, S308'Access,
      S309'Access, S310'Access, S311'Access, S312'Access,
      S313'Access, S314'Access, S315'Access, S316'Access,
      S317'Access, S318'Access, S319'Access, S320'Access,
      S321'Access, S322'Access, S323'Access, S324'Access,
      S325'Access, S326'Access, S327'Access, S328'Access,
      S329'Access, S330'Access, S331'Access, S332'Access,
      S333'Access, S334'Access, S335'Access, S336'Access,
      S337'Access, S338'Access, S339'Access, S340'Access,
      S341'Access, S342'Access, S343'Access, S344'Access,
      S345'Access, S346'Access, S347'Access, S348'Access,
      S349'Access, S350'Access, S351'Access, S352'Access,
      S353'Access, S354'Access, S355'Access, S356'Access,
      S357'Access, S358'Access, S359'Access, S360'Access,
      S361'Access, S362'Access, S363'Access, S364'Access,
      S365'Access, S366'Access, S367'Access, S368'Access,
      S369'Access, S370'Access, S371'Access, S372'Access,
      S373'Access, S374'Access, S375'Access, S376'Access,
      S377'Access, S378'Access, S379'Access, S380'Access,
      S381'Access, S382'Access, S383'Access, S384'Access,
      S385'Access, S386'Access, S387'Access, S388'Access,
      S389'Access, S390'Access, S391'Access, S392'Access,
      S393'Access, S394'Access, S395'Access, S396'Access,
      S397'Access, S398'Access, S399'Access, S400'Access,
      S401'Access, S402'Access, S403'Access, S404'Access,
      S405'Access, S406'Access, S407'Access, S408'Access,
      S409'Access, S410'Access, S411'Access, S412'Access,
      S413'Access, S414'Access, S415'Access, S416'Access,
      S417'Access, S418'Access, S419'Access, S420'Access,
      S421'Access, S422'Access, S423'Access, S424'Access,
      S425'Access, S426'Access, S427'Access, S428'Access,
      S429'Access, S430'Access, S431'Access, S432'Access,
      S433'Access, S434'Access, S435'Access, S436'Access,
      S437'Access, S438'Access, S439'Access, S440'Access,
      S441'Access, S442'Access, S443'Access, S444'Access,
      S445'Access, S446'Access);

   Ext_1 : aliased constant String := ".1";
   Ext_2 : aliased constant String := ".1in";
   Ext_3 : aliased constant String := ".1m";
   Ext_4 : aliased constant String := ".1x";
   Ext_5 : aliased constant String := ".2";
   Ext_6 : aliased constant String := ".3";
   Ext_7 : aliased constant String := ".3in";
   Ext_8 : aliased constant String := ".3m";
   Ext_9 : aliased constant String := ".3p";
   Ext_10 : aliased constant String := ".3pm";
   Ext_11 : aliased constant String := ".3qt";
   Ext_12 : aliased constant String := ".3x";
   Ext_13 : aliased constant String := ".4";
   Ext_14 : aliased constant String := ".5";
   Ext_15 : aliased constant String := ".6";
   Ext_16 : aliased constant String := ".7";
   Ext_17 : aliased constant String := ".8";
   Ext_18 : aliased constant String := ".9";
   Ext_19 : aliased constant String := ".al";
   Ext_20 : aliased constant String := ".app";
   Ext_21 : aliased constant String := ".as";
   Ext_22 : aliased constant String := ".asc";
   Ext_23 : aliased constant String := ".asm";
   Ext_24 : aliased constant String := ".asy";
   Ext_25 : aliased constant String := ".bas";
   Ext_26 : aliased constant String := ".bb";
   Ext_27 : aliased constant String := ".bf";
   Ext_28 : aliased constant String := ".bi";
   Ext_29 : aliased constant String := ".bs";
   Ext_30 : aliased constant String := ".builds";
   Ext_31 : aliased constant String := ".ch";
   Ext_32 : aliased constant String := ".cl";
   Ext_33 : aliased constant String := ".cls";
   Ext_34 : aliased constant String := ".cmp";
   Ext_35 : aliased constant String := ".cs";
   Ext_36 : aliased constant String := ".csc";
   Ext_37 : aliased constant String := ".csl";
   Ext_38 : aliased constant String := ".d";
   Ext_39 : aliased constant String := ".dsp";
   Ext_40 : aliased constant String := ".e";
   Ext_41 : aliased constant String := ".ecl";
   Ext_42 : aliased constant String := ".es";
   Ext_43 : aliased constant String := ".ex";
   Ext_44 : aliased constant String := ".f";
   Ext_45 : aliased constant String := ".for";
   Ext_46 : aliased constant String := ".fr";
   Ext_47 : aliased constant String := ".frm";
   Ext_48 : aliased constant String := ".fs";
   Ext_49 : aliased constant String := ".ftl";
   Ext_50 : aliased constant String := ".g";
   Ext_51 : aliased constant String := ".gd";
   Ext_52 : aliased constant String := ".gml";
   Ext_53 : aliased constant String := ".gs";
   Ext_54 : aliased constant String := ".gsc";
   Ext_55 : aliased constant String := ".gsh";
   Ext_56 : aliased constant String := ".gts";
   Ext_57 : aliased constant String := ".h";
   Ext_58 : aliased constant String := ".hh";
   Ext_59 : aliased constant String := ".html";
   Ext_60 : aliased constant String := ".i";
   Ext_61 : aliased constant String := ".ice";
   Ext_62 : aliased constant String := ".inc";
   Ext_63 : aliased constant String := ".json";
   Ext_64 : aliased constant String := ".l";
   Ext_65 : aliased constant String := ".lean";
   Ext_66 : aliased constant String := ".lisp";
   Ext_67 : aliased constant String := ".ls";
   Ext_68 : aliased constant String := ".lsp";
   Ext_69 : aliased constant String := ".m";
   Ext_70 : aliased constant String := ".m4";
   Ext_71 : aliased constant String := ".man";
   Ext_72 : aliased constant String := ".mask";
   Ext_73 : aliased constant String := ".mc";
   Ext_74 : aliased constant String := ".md";
   Ext_75 : aliased constant String := ".mdoc";
   Ext_76 : aliased constant String := ".ml";
   Ext_77 : aliased constant String := ".mod";
   Ext_78 : aliased constant String := ".mojo";
   Ext_79 : aliased constant String := ".ms";
   Ext_80 : aliased constant String := ".n";
   Ext_81 : aliased constant String := ".ncl";
   Ext_82 : aliased constant String := ".nl";
   Ext_83 : aliased constant String := ".nu";
   Ext_84 : aliased constant String := ".odin";
   Ext_85 : aliased constant String := ".p";
   Ext_86 : aliased constant String := ".php";
   Ext_87 : aliased constant String := ".pl";
   Ext_88 : aliased constant String := ".plist";
   Ext_89 : aliased constant String := ".plt";
   Ext_90 : aliased constant String := ".pm";
   Ext_91 : aliased constant String := ".pod";
   Ext_92 : aliased constant String := ".pp";
   Ext_93 : aliased constant String := ".pro";
   Ext_94 : aliased constant String := ".properties";
   Ext_95 : aliased constant String := ".q";
   Ext_96 : aliased constant String := ".qs";
   Ext_97 : aliased constant String := ".r";
   Ext_98 : aliased constant String := ".re";
   Ext_99 : aliased constant String := ".res";
   Ext_100 : aliased constant String := ".rno";
   Ext_101 : aliased constant String := ".rpy";
   Ext_102 : aliased constant String := ".rs";
   Ext_103 : aliased constant String := ".s";
   Ext_104 : aliased constant String := ".sc";
   Ext_105 : aliased constant String := ".scd";
   Ext_106 : aliased constant String := ".sol";
   Ext_107 : aliased constant String := ".sql";
   Ext_108 : aliased constant String := ".srt";
   Ext_109 : aliased constant String := ".st";
   Ext_110 : aliased constant String := ".star";
   Ext_111 : aliased constant String := ".stl";
   Ext_112 : aliased constant String := ".sw";
   Ext_113 : aliased constant String := ".t";
   Ext_114 : aliased constant String := ".tag";
   Ext_115 : aliased constant String := ".tlv";
   Ext_116 : aliased constant String := ".toc";
   Ext_117 : aliased constant String := ".ts";
   Ext_118 : aliased constant String := ".tst";
   Ext_119 : aliased constant String := ".tsx";
   Ext_120 : aliased constant String := ".txt";
   Ext_121 : aliased constant String := ".typ";
   Ext_122 : aliased constant String := ".url";
   Ext_123 : aliased constant String := ".v";
   Ext_124 : aliased constant String := ".vba";
   Ext_125 : aliased constant String := ".w";
   Ext_126 : aliased constant String := ".x";
   Ext_127 : aliased constant String := ".yaml";
   Ext_128 : aliased constant String := ".yml";
   Ext_129 : aliased constant String := ".yy";

   Rules : aliased constant Rule_Array := (
      1 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      2 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      3 => (RULE_MATCH, 0, (0, 0), 148, 403),
      4 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      5 => (RULE_MATCH, 0, (0, 0), 147, 403),
      6 => (RULE_MATCH, 0, (0, 0), 163, 402),
      7 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      8 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      9 => (RULE_MATCH, 0, (0, 0), 148, 403),
      10 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      11 => (RULE_MATCH, 0, (0, 0), 147, 403),
      12 => (RULE_SUCCESS, 0, (0, 0), 0, 402),
      13 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      14 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      15 => (RULE_MATCH, 0, (0, 0), 148, 403),
      16 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      17 => (RULE_MATCH, 0, (0, 0), 147, 403),
      18 => (RULE_SUCCESS, 0, (0, 0), 0, 402),
      19 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      20 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      21 => (RULE_MATCH, 0, (0, 0), 148, 403),
      22 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      23 => (RULE_MATCH, 0, (0, 0), 147, 403),
      24 => (RULE_SUCCESS, 0, (0, 0), 0, 402),
      25 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      26 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      27 => (RULE_MATCH, 0, (0, 0), 148, 403),
      28 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      29 => (RULE_MATCH, 0, (0, 0), 147, 403),
      30 => (RULE_MATCH, 0, (0, 0), 163, 402),
      31 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      32 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      33 => (RULE_MATCH, 0, (0, 0), 148, 403),
      34 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      35 => (RULE_MATCH, 0, (0, 0), 147, 403),
      36 => (RULE_MATCH, 0, (0, 0), 163, 402),
      37 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      38 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      39 => (RULE_MATCH, 0, (0, 0), 148, 403),
      40 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      41 => (RULE_MATCH, 0, (0, 0), 147, 403),
      42 => (RULE_SUCCESS, 0, (0, 0), 0, 402),
      43 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      44 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      45 => (RULE_MATCH, 0, (0, 0), 148, 403),
      46 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      47 => (RULE_MATCH, 0, (0, 0), 147, 403),
      48 => (RULE_SUCCESS, 0, (0, 0), 0, 402),
      49 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      50 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      51 => (RULE_MATCH, 0, (0, 0), 148, 403),
      52 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      53 => (RULE_MATCH, 0, (0, 0), 147, 403),
      54 => (RULE_SUCCESS, 0, (0, 0), 0, 402),
      55 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      56 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      57 => (RULE_MATCH, 0, (0, 0), 148, 403),
      58 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      59 => (RULE_MATCH, 0, (0, 0), 147, 403),
      60 => (RULE_SUCCESS, 0, (0, 0), 0, 402),
      61 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      62 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      63 => (RULE_MATCH, 0, (0, 0), 148, 403),
      64 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      65 => (RULE_MATCH, 0, (0, 0), 147, 403),
      66 => (RULE_SUCCESS, 0, (0, 0), 0, 402),
      67 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      68 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      69 => (RULE_MATCH, 0, (0, 0), 148, 403),
      70 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      71 => (RULE_MATCH, 0, (0, 0), 147, 403),
      72 => (RULE_SUCCESS, 0, (0, 0), 0, 402),
      73 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      74 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      75 => (RULE_MATCH, 0, (0, 0), 148, 403),
      76 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      77 => (RULE_MATCH, 0, (0, 0), 147, 403),
      78 => (RULE_MATCH, 0, (0, 0), 163, 402),
      79 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      80 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      81 => (RULE_MATCH, 0, (0, 0), 148, 403),
      82 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      83 => (RULE_MATCH, 0, (0, 0), 147, 403),
      84 => (RULE_MATCH, 0, (0, 0), 163, 402),
      85 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      86 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      87 => (RULE_MATCH, 0, (0, 0), 148, 403),
      88 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      89 => (RULE_MATCH, 0, (0, 0), 147, 403),
      90 => (RULE_MATCH, 0, (0, 0), 163, 402),
      91 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      92 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      93 => (RULE_MATCH, 0, (0, 0), 148, 403),
      94 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      95 => (RULE_MATCH, 0, (0, 0), 147, 403),
      96 => (RULE_MATCH, 0, (0, 0), 163, 402),
      97 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      98 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      99 => (RULE_MATCH, 0, (0, 0), 148, 403),
      100 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      101 => (RULE_MATCH, 0, (0, 0), 147, 403),
      102 => (RULE_MATCH, 0, (0, 0), 163, 402),
      103 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      104 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      105 => (RULE_MATCH, 0, (0, 0), 148, 403),
      106 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      107 => (RULE_MATCH, 0, (0, 0), 147, 403),
      108 => (RULE_MATCH, 0, (0, 0), 163, 402),
      109 => (RULE_MATCH, 0, (0, 0), 79, 266),
      110 => (RULE_SUCCESS, 0, (0, 0), 0, 380),
      111 => (RULE_MATCH, 0, (0, 0), 239, 296),
      112 => (RULE_MATCH, 0, (0, 0), 200, 267),
      113 => (RULE_MATCH, 0, (0, 0), 102, 386),
      114 => (RULE_MATCH, 0, (0, 0), 152, 269),
      115 => (RULE_MATCH, 0, (0, 0), 109, 265),
      116 => (RULE_MATCH, 0, (0, 0), 13, 356),
      117 => (RULE_MATCH, 0, (0, 0), 16, 356),
      118 => (RULE_MATCH, 0, (0, 0), 18, 356),
      119 => (RULE_MATCH, 0, (0, 0), 19, 356),
      120 => (RULE_MATCH, 0, (0, 0), 17, 356),
      121 => (RULE_MATCH, 0, (0, 0), 14, 356),
      122 => (RULE_MATCH, 0, (0, 0), 15, 356),
      123 => (RULE_MATCH, 0, (0, 0), 124, 332),
      124 => (RULE_SUCCESS, 0, (0, 0), 0, 270),
      125 => (RULE_MATCH, 0, (0, 0), 127, 305),
      126 => (RULE_MATCH, 0, (0, 0), 75, 271),
      127 => (RULE_MATCH_AND, 0, (0, 0), 139, 433),
      128 => (RULE_MATCH_AND, 0, (0, 0), 83, 433),
      129 => (RULE_MATCH_AND, 0, (0, 0), 138, 433),
      130 => (RULE_MATCH_AND, 0, (0, 0), 136, 433),
      131 => (RULE_MATCH_AND, 0, (0, 0), 137, 433),
      132 => (RULE_MATCH_AND, 0, (0, 0), 140, 433),
      133 => (RULE_MATCH_AND, 0, (0, 0), 7, 433),
      134 => (RULE_MATCH_AND, 0, (0, 0), 78, 433),
      135 => (RULE_MATCH_AND, 0, (0, 0), 82, 433),
      136 => (RULE_MATCH_AND, 0, (0, 0), 80, 433),
      137 => (RULE_MATCH, 0, (0, 0), 81, 433),
      138 => (RULE_MATCH, 0, (0, 0), 139, 437),
      139 => (RULE_MATCH, 0, (0, 0), 11, 275),
      140 => (RULE_MATCH, 0, (0, 0), 99, 274),
      141 => (RULE_MATCH, 0, (0, 0), 67, 283),
      142 => (RULE_MATCH, 0, (0, 0), 47, 272),
      143 => (RULE_MATCH, 0, (0, 0), 46, 324),
      144 => (RULE_MATCH, 0, (0, 0), 93, 324),
      145 => (RULE_MATCH, 0, (0, 0), 12, 277),
      146 => (RULE_MATCH, 0, (0, 0), 126, 305),
      147 => (RULE_MATCH, 0, (0, 0), 106, 273),
      148 => (RULE_MATCH, 0, (0, 0), 34, 278),
      149 => (RULE_MATCH, 0, (0, 0), 36, 278),
      150 => (RULE_MATCH, 0, (0, 0), 33, 278),
      151 => (RULE_MATCH, 0, (0, 0), 35, 278),
      152 => (RULE_MATCH, 0, (0, 0), 249, 276),
      153 => (RULE_MATCH, 0, (0, 0), 111, 441),
      154 => (RULE_MATCH, 0, (0, 0), 172, 446),
      155 => (RULE_MATCH, 0, (0, 0), 216, 284),
      156 => (RULE_MATCH, 0, (0, 0), 241, 285),
      157 => (RULE_MATCH, 0, (0, 0), 71, 372),
      158 => (RULE_MATCH_AND, 0, (0, 0), 141, 437),
      159 => (RULE_MATCH, 0, (0, 0), 212, 437),
      160 => (RULE_MATCH, 0, (0, 0), 141, 433),
      161 => (RULE_MATCH, 0, (0, 0), 220, 425),
      162 => (RULE_MATCH, 0, (0, 0), 122, 369),
      163 => (RULE_MATCH, 0, (0, 0), 154, 316),
      164 => (RULE_MATCH, 0, (0, 0), 1, 413),
      165 => (RULE_MATCH, 0, (0, 0), 205, 280),
      166 => (RULE_MATCH, 0, (0, 0), 173, 313),
      167 => (RULE_MATCH, 0, (0, 0), 181, 313),
      168 => (RULE_MATCH, 0, (0, 0), 84, 313),
      169 => (RULE_MATCH, 0, (0, 0), 128, 313),
      170 => (RULE_MATCH, 0, (0, 0), 32, 441),
      171 => (RULE_MATCH, 0, (0, 0), 43, 331),
      172 => (RULE_MATCH, 0, (0, 0), 248, 287),
      173 => (RULE_MATCH, 0, (0, 0), 112, 288),
      174 => (RULE_MATCH, 0, (0, 0), 23, 347),
      175 => (RULE_MATCH, 0, (0, 0), 4, 351),
      176 => (RULE_MATCH, 0, (0, 0), 88, 299),
      177 => (RULE_MATCH, 0, (0, 0), 191, 290),
      178 => (RULE_MATCH, 0, (0, 0), 190, 290),
      179 => (RULE_MATCH, 0, (0, 0), 206, 290),
      180 => (RULE_MATCH, 0, (0, 0), 221, 294),
      181 => (RULE_MATCH, 0, (0, 0), 222, 294),
      182 => (RULE_MATCH, 0, (0, 0), 187, 294),
      183 => (RULE_MATCH, 0, (0, 0), 229, 297),
      184 => (RULE_MATCH, 0, (0, 0), 201, 297),
      185 => (RULE_MATCH, 0, (0, 0), 182, 297),
      186 => (RULE_MATCH, 0, (0, 0), 160, 292),
      187 => (RULE_MATCH, 0, (0, 0), 49, 291),
      188 => (RULE_MATCH, 0, (0, 0), 179, 296),
      189 => (RULE_MATCH, 0, (0, 0), 72, 330),
      190 => (RULE_MATCH, 0, (0, 0), 211, 295),
      191 => (RULE_MATCH, 0, (0, 0), 189, 295),
      192 => (RULE_MATCH, 0, (0, 0), 223, 295),
      193 => (RULE_MATCH, 0, (0, 0), 229, 297),
      194 => (RULE_MATCH, 0, (0, 0), 201, 297),
      195 => (RULE_MATCH, 0, (0, 0), 182, 297),
      196 => (RULE_MATCH, 0, (0, 0), 119, 303),
      197 => (RULE_MATCH, 0, (0, 0), 256, 300),
      198 => (RULE_MATCH, 0, (0, 0), 108, 304),
      199 => (RULE_MATCH, 0, (0, 0), 119, 303),
      200 => (RULE_MATCH, 0, (0, 0), 108, 304),
      201 => (RULE_MATCH, 0, (0, 0), 103, 303),
      202 => (RULE_MATCH, 0, (0, 0), 196, 307),
      203 => (RULE_SUCCESS, 0, (0, 0), 0, 426),
      204 => (RULE_MATCH_AND, 0, (0, 0), 142, 433),
      205 => (RULE_MATCH, 0, (0, 0), 214, 433),
      206 => (RULE_MATCH_AND, 0, (0, 0), 142, 437),
      207 => (RULE_MATCH, 0, (0, 0), 213, 437),
      208 => (RULE_MATCH, 0, (0, 0), 104, 303),
      209 => (RULE_MATCH, 0, (0, 0), 177, 298),
      210 => (RULE_MATCH, 0, (0, 0), 178, 312),
      211 => (RULE_MATCH, 0, (0, 0), 5, 301),
      212 => (RULE_MATCH, 0, (0, 0), 107, 306),
      213 => (RULE_MATCH, 0, (0, 0), 118, 302),
      214 => (RULE_MATCH, 0, (0, 0), 91, 309),
      215 => (RULE_MATCH, 0, (0, 0), 155, 308),
      216 => (RULE_MATCH, 0, (0, 0), 90, 309),
      217 => (RULE_MATCH, 0, (0, 0), 92, 311),
      218 => (RULE_MATCH, 0, (0, 0), 32, 441),
      219 => (RULE_MATCH, 0, (0, 0), 37, 320),
      220 => (RULE_MATCH, 0, (0, 0), 153, 316),
      221 => (RULE_SUCCESS, 0, (0, 0), 0, 314),
      222 => (RULE_MATCH, 0, (0, 0), 97, 312),
      223 => (RULE_MATCH, 0, (0, 0), 253, 319),
      224 => (RULE_MATCH, 0, (0, 0), 167, 315),
      225 => (RULE_MATCH, 0, (0, 0), 173, 313),
      226 => (RULE_MATCH, 0, (0, 0), 181, 313),
      227 => (RULE_MATCH, 0, (0, 0), 84, 313),
      228 => (RULE_MATCH, 0, (0, 0), 128, 313),
      229 => (RULE_MATCH, 0, (0, 0), 173, 313),
      230 => (RULE_MATCH, 0, (0, 0), 181, 313),
      231 => (RULE_MATCH, 0, (0, 0), 84, 313),
      232 => (RULE_MATCH, 0, (0, 0), 128, 313),
      233 => (RULE_MATCH, 0, (0, 0), 123, 316),
      234 => (RULE_SUCCESS, 0, (0, 0), 0, 317),
      235 => (RULE_MATCH, 0, (0, 0), 184, 370),
      236 => (RULE_MATCH, 0, (0, 0), 174, 281),
      237 => (RULE_MATCH, 0, (0, 0), 234, 281),
      238 => (RULE_MATCH, 0, (0, 0), 133, 281),
      239 => (RULE_MATCH, 0, (0, 0), 134, 281),
      240 => (RULE_MATCH, 0, (0, 0), 131, 281),
      241 => (RULE_MATCH, 0, (0, 0), 132, 281),
      242 => (RULE_MATCH, 0, (0, 0), 255, 281),
      243 => (RULE_MATCH, 0, (0, 0), 261, 281),
      244 => (RULE_SUCCESS, 0, (0, 0), 0, 279),
      245 => (RULE_MATCH, 0, (0, 0), 55, 322),
      246 => (RULE_MATCH, 0, (0, 0), 56, 293),
      247 => (RULE_SUCCESS, 0, (0, 0), 0, 321),
      248 => (RULE_MATCH, 0, (0, 0), 13, 356),
      249 => (RULE_MATCH, 0, (0, 0), 16, 356),
      250 => (RULE_MATCH, 0, (0, 0), 18, 356),
      251 => (RULE_MATCH, 0, (0, 0), 19, 356),
      252 => (RULE_MATCH, 0, (0, 0), 17, 356),
      253 => (RULE_MATCH, 0, (0, 0), 14, 356),
      254 => (RULE_MATCH, 0, (0, 0), 15, 356),
      255 => (RULE_MATCH, 0, (0, 0), 129, 409),
      256 => (RULE_MATCH, 0, (0, 0), 74, 327),
      257 => (RULE_SUCCESS, 0, (0, 0), 0, 412),
      258 => (RULE_MATCH, 0, (0, 0), 13, 356),
      259 => (RULE_MATCH, 0, (0, 0), 16, 356),
      260 => (RULE_MATCH, 0, (0, 0), 18, 356),
      261 => (RULE_MATCH, 0, (0, 0), 19, 356),
      262 => (RULE_MATCH, 0, (0, 0), 17, 356),
      263 => (RULE_MATCH, 0, (0, 0), 14, 356),
      264 => (RULE_MATCH, 0, (0, 0), 15, 356),
      265 => (RULE_MATCH, 0, (0, 0), 120, 375),
      266 => (RULE_MATCH, 0, (0, 0), 250, 415),
      267 => (RULE_MATCH, 0, (0, 0), 247, 415),
      268 => (RULE_MATCH, 0, (0, 0), 215, 415),
      269 => (RULE_MATCH, 0, (0, 0), 226, 357),
      270 => (RULE_MATCH, 0, (0, 0), 193, 357),
      271 => (RULE_MATCH, 0, (0, 0), 230, 357),
      272 => (RULE_MATCH, 0, (0, 0), 231, 357),
      273 => (RULE_MATCH, 0, (0, 0), 202, 357),
      274 => (RULE_MATCH, 0, (0, 0), 171, 378),
      275 => (RULE_MATCH, 0, (0, 0), 40, 379),
      276 => (RULE_MATCH, 0, (0, 0), 225, 379),
      277 => (RULE_MATCH, 0, (0, 0), 245, 274),
      278 => (RULE_MATCH, 0, (0, 0), 3, 363),
      279 => (RULE_MATCH, 0, (0, 0), 2, 365),
      280 => (RULE_SUCCESS, 0, (0, 0), 0, 327),
      281 => (RULE_MATCH, 0, (0, 0), 69, 284),
      282 => (RULE_MATCH, 0, (0, 0), 100, 335),
      283 => (RULE_MATCH, 0, (0, 0), 164, 402),
      284 => (RULE_MATCH, 0, (0, 0), 162, 381),
      285 => (RULE_MATCH, 0, (0, 0), 244, 333),
      286 => (RULE_MATCH, 0, (0, 0), 243, 334),
      287 => (RULE_MATCH, 0, (0, 0), 216, 284),
      288 => (RULE_MATCH, 0, (0, 0), 217, 360),
      289 => (RULE_MATCH, 0, (0, 0), 232, 340),
      290 => (RULE_SUCCESS, 0, (0, 0), 0, 338),
      291 => (RULE_MATCH, 0, (0, 0), 216, 284),
      292 => (RULE_MATCH, 0, (0, 0), 217, 360),
      293 => (RULE_MATCH, 0, (0, 0), 184, 370),
      294 => (RULE_MATCH, 0, (0, 0), 48, 350),
      295 => (RULE_MATCH, 0, (0, 0), 119, 346),
      296 => (RULE_MATCH, 0, (0, 0), 208, 341),
      297 => (RULE_MATCH_AND, 0, (0, 0), 68, 349),
      298 => (RULE_MATCH, 0, (0, 0), 70, 349),
      299 => (RULE_MATCH, 0, (0, 0), 175, 344),
      300 => (RULE_MATCH, 0, (0, 0), 238, 336),
      301 => (RULE_MATCH, 0, (0, 0), 58, 343),
      302 => (RULE_MATCH, 0, (0, 0), 240, 343),
      303 => (RULE_SUCCESS, 0, (0, 0), 0, 342),
      304 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      305 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      306 => (RULE_MATCH, 0, (0, 0), 148, 403),
      307 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      308 => (RULE_MATCH, 0, (0, 0), 147, 403),
      309 => (RULE_SUCCESS, 0, (0, 0), 0, 402),
      310 => (RULE_MATCH, 0, (0, 0), 263, 430),
      311 => (RULE_MATCH, 0, (0, 0), 130, 438),
      312 => (RULE_MATCH, 0, (0, 0), 242, 342),
      313 => (RULE_MATCH, 0, (0, 0), 86, 355),
      314 => (RULE_MATCH, 0, (0, 0), 29, 348),
      315 => (RULE_MATCH, 0, (0, 0), 77, 348),
      316 => (RULE_MATCH, 0, (0, 0), 105, 310),
      317 => (RULE_SUCCESS, 0, (0, 0), 0, 348),
      318 => (RULE_MATCH_AND, 0, (0, 0), 145, 403),
      319 => (RULE_MATCH_AND, 0, (0, 0), 146, 403),
      320 => (RULE_MATCH, 0, (0, 0), 148, 403),
      321 => (RULE_MATCH_AND, 0, (0, 0), 149, 403),
      322 => (RULE_MATCH, 0, (0, 0), 147, 403),
      323 => (RULE_SUCCESS, 0, (0, 0), 0, 402),
      324 => (RULE_MATCH, 0, (0, 0), 42, 367),
      325 => (RULE_MATCH, 0, (0, 0), 57, 416),
      326 => (RULE_MATCH, 0, (0, 0), 50, 441),
      327 => (RULE_MATCH, 0, (0, 0), 185, 353),
      328 => (RULE_SUCCESS, 0, (0, 0), 0, 264),
      329 => (RULE_MATCH, 0, (0, 0), 188, 354),
      330 => (RULE_MATCH, 0, (0, 0), 209, 441),
      331 => (RULE_MATCH, 0, (0, 0), 150, 402),
      332 => (RULE_SUCCESS, 0, (0, 0), 0, 431),
      333 => (RULE_MATCH, 0, (0, 0), 218, 431),
      334 => (RULE_SUCCESS, 0, (0, 0), 0, 345),
      335 => (RULE_MATCH, 0, (0, 0), 144, 402),
      336 => (RULE_MATCH, 0, (0, 0), 115, 359),
      337 => (RULE_MATCH, 0, (0, 0), 210, 441),
      338 => (RULE_MATCH, 0, (0, 0), 154, 316),
      339 => (RULE_MATCH, 0, (0, 0), 62, 426),
      340 => (RULE_MATCH, 0, (0, 0), 113, 358),
      341 => (RULE_SUCCESS, 0, (0, 0), 0, 360),
      342 => (RULE_MATCH, 0, (0, 0), 195, 362),
      343 => (RULE_SUCCESS, 0, (0, 0), 0, 361),
      344 => (RULE_MATCH, 0, (0, 0), 44, 368),
      345 => (RULE_MATCH, 0, (0, 0), 260, 371),
      346 => (RULE_MATCH, 0, (0, 0), 251, 318),
      347 => (RULE_MATCH, 0, (0, 0), 252, 318),
      348 => (RULE_SUCCESS, 0, (0, 0), 0, 373),
      349 => (RULE_MATCH, 0, (0, 0), 55, 322),
      350 => (RULE_MATCH, 0, (0, 0), 54, 375),
      351 => (RULE_MATCH, 0, (0, 0), 159, 385),
      352 => (RULE_SUCCESS, 0, (0, 0), 0, 380),
      353 => (RULE_MATCH_AND, 0, (0, 0), 89, 380),
      354 => (RULE_MATCH_AND, 0, (0, 0), 235, 380),
      355 => (RULE_MATCH_AND, 0, (0, 0), 186, 380),
      356 => (RULE_MATCH_AND, 0, (0, 0), 233, 380),
      357 => (RULE_MATCH, 0, (0, 0), 63, 380),
      358 => (RULE_MATCH, 0, (0, 0), 203, 395),
      359 => (RULE_MATCH, 0, (0, 0), 183, 442),
      360 => (RULE_SUCCESS, 0, (0, 0), 0, 374),
      361 => (RULE_MATCH, 0, (0, 0), 207, 385),
      362 => (RULE_SUCCESS, 0, (0, 0), 0, 380),
      363 => (RULE_MATCH_AND, 0, (0, 0), 89, 380),
      364 => (RULE_MATCH_AND, 0, (0, 0), 235, 380),
      365 => (RULE_MATCH_AND, 0, (0, 0), 186, 380),
      366 => (RULE_MATCH_AND, 0, (0, 0), 233, 380),
      367 => (RULE_MATCH, 0, (0, 0), 63, 380),
      368 => (RULE_MATCH, 0, (0, 0), 203, 395),
      369 => (RULE_MATCH, 0, (0, 0), 219, 440),
      370 => (RULE_MATCH, 0, (0, 0), 156, 383),
      371 => (RULE_SUCCESS, 0, (0, 0), 0, 382),
      372 => (RULE_MATCH, 0, (0, 0), 224, 379),
      373 => (RULE_MATCH, 0, (0, 0), 236, 387),
      374 => (RULE_MATCH, 0, (0, 0), 117, 384),
      375 => (RULE_MATCH, 0, (0, 0), 161, 385),
      376 => (RULE_MATCH, 0, (0, 0), 258, 326),
      377 => (RULE_MATCH_AND, 0, (0, 0), 59, 390),
      378 => (RULE_MATCH, 0, (0, 0), 61, 390),
      379 => (RULE_MATCH, 0, (0, 0), 192, 325),
      380 => (RULE_MATCH_AND, 0, (0, 0), 157, 326),
      381 => (RULE_MATCH, 0, (0, 0), 151, 326),
      382 => (RULE_MATCH_AND, 0, (0, 0), 157, 328),
      383 => (RULE_MATCH, 0, (0, 0), 143, 328),
      384 => (RULE_MATCH, 0, (0, 0), 157, 326),
      385 => (RULE_MATCH, 0, (0, 0), 158, 328),
      386 => (RULE_MATCH, 0, (0, 0), 9, 445),
      387 => (RULE_MATCH, 0, (0, 0), 22, 323),
      388 => (RULE_MATCH, 0, (0, 0), 101, 389),
      389 => (RULE_MATCH, 0, (0, 0), 28, 391),
      390 => (RULE_MATCH, 0, (0, 0), 27, 398),
      391 => (RULE_MATCH, 0, (0, 0), 8, 401),
      392 => (RULE_MATCH, 0, (0, 0), 52, 392),
      393 => (RULE_MATCH, 0, (0, 0), 228, 397),
      394 => (RULE_MATCH, 0, (0, 0), 198, 397),
      395 => (RULE_MATCH, 0, (0, 0), 227, 397),
      396 => (RULE_MATCH, 0, (0, 0), 170, 281),
      397 => (RULE_MATCH, 0, (0, 0), 234, 281),
      398 => (RULE_MATCH, 0, (0, 0), 199, 396),
      399 => (RULE_MATCH, 0, (0, 0), 197, 396),
      400 => (RULE_MATCH, 0, (0, 0), 30, 394),
      401 => (RULE_MATCH, 0, (0, 0), 165, 402),
      402 => (RULE_MATCH, 0, (0, 0), 114, 388),
      403 => (RULE_SUCCESS, 0, (0, 0), 0, 399),
      404 => (RULE_MATCH, 0, (0, 0), 116, 404),
      405 => (RULE_MATCH, 0, (0, 0), 5, 400),
      406 => (RULE_MATCH, 0, (0, 0), 209, 441),
      407 => (RULE_MATCH, 0, (0, 0), 13, 356),
      408 => (RULE_MATCH, 0, (0, 0), 16, 356),
      409 => (RULE_MATCH, 0, (0, 0), 18, 356),
      410 => (RULE_MATCH, 0, (0, 0), 19, 356),
      411 => (RULE_MATCH, 0, (0, 0), 17, 356),
      412 => (RULE_MATCH, 0, (0, 0), 14, 356),
      413 => (RULE_MATCH, 0, (0, 0), 15, 356),
      414 => (RULE_MATCH, 0, (0, 0), 26, 420),
      415 => (RULE_MATCH, 0, (0, 0), 41, 410),
      416 => (RULE_MATCH, 0, (0, 0), 25, 420),
      417 => (RULE_MATCH, 0, (0, 0), 96, 348),
      418 => (RULE_MATCH, 0, (0, 0), 87, 414),
      419 => (RULE_MATCH, 0, (0, 0), 154, 316),
      420 => (RULE_MATCH, 0, (0, 0), 31, 377),
      421 => (RULE_MATCH, 0, (0, 0), 21, 406),
      422 => (RULE_MATCH, 0, (0, 0), 24, 376),
      423 => (RULE_MATCH, 0, (0, 0), 39, 423),
      424 => (RULE_SUCCESS, 0, (0, 0), 0, 405),
      425 => (RULE_MATCH, 0, (0, 0), 110, 419),
      426 => (RULE_MATCH, 0, (0, 0), 66, 418),
      427 => (RULE_MATCH, 0, (0, 0), 73, 413),
      428 => (RULE_MATCH, 0, (0, 0), 246, 407),
      429 => (RULE_SUCCESS, 0, (0, 0), 0, 417),
      430 => (RULE_MATCH, 0, (0, 0), 76, 408),
      431 => (RULE_MATCH, 0, (0, 0), 180, 421),
      432 => (RULE_MATCH, 0, (0, 0), 210, 441),
      433 => (RULE_SUCCESS, 0, (0, 0), 0, 380),
      434 => (RULE_MATCH_AND, 0, (0, 0), 89, 380),
      435 => (RULE_MATCH_AND, 0, (0, 0), 235, 380),
      436 => (RULE_MATCH_AND, 0, (0, 0), 186, 380),
      437 => (RULE_MATCH_AND, 0, (0, 0), 233, 380),
      438 => (RULE_MATCH, 0, (0, 0), 63, 380),
      439 => (RULE_MATCH, 0, (0, 0), 204, 395),
      440 => (RULE_MATCH, 0, (0, 0), 176, 427),
      441 => (RULE_MATCH, 0, (0, 0), 51, 329),
      442 => (RULE_MATCH, 0, (0, 0), 169, 422),
      443 => (RULE_MATCH, 0, (0, 0), 94, 439),
      444 => (RULE_MATCH, 0, (0, 0), 168, 425),
      445 => (RULE_MATCH, 0, (0, 0), 53, 441),
      446 => (RULE_SUCCESS, 0, (0, 0), 0, 428),
      447 => (RULE_MATCH, 0, (0, 0), 257, 309),
      448 => (RULE_SUCCESS, 0, (0, 0), 0, 411),
      449 => (RULE_MATCH, 0, (0, 0), 194, 424),
      450 => (RULE_MATCH, 0, (0, 0), 38, 441),
      451 => (RULE_MATCH, 0, (0, 0), 10, 435),
      452 => (RULE_MATCH, 0, (0, 0), 20, 268),
      453 => (RULE_SUCCESS, 0, (0, 0), 0, 426),
      454 => (RULE_MATCH, 0, (0, 0), 95, 429),
      455 => (RULE_SUCCESS, 0, (0, 0), 0, 441),
      456 => (RULE_MATCH, 0, (0, 0), 166, 326),
      457 => (RULE_MATCH, 0, (0, 0), 45, 286),
      458 => (RULE_MATCH, 0, (0, 0), 135, 434),
      459 => (RULE_MATCH, 0, (0, 0), 65, 432),
      460 => (RULE_MATCH, 0, (0, 0), 125, 436),
      461 => (RULE_SUCCESS, 0, (0, 0), 0, 433),
      462 => (RULE_MATCH, 0, (0, 0), 6, 373),
      463 => (RULE_MATCH, 0, (0, 0), 121, 282),
      464 => (RULE_MATCH, 0, (0, 0), 254, 289),
      465 => (RULE_MATCH, 0, (0, 0), 85, 393),
      466 => (RULE_MATCH, 0, (0, 0), 98, 339),
      467 => (RULE_MATCH, 0, (0, 0), 60, 337),
      468 => (RULE_MATCH, 0, (0, 0), 237, 352),
      469 => (RULE_MATCH, 0, (0, 0), 262, 364),
      470 => (RULE_MATCH, 0, (0, 0), 259, 366),
      471 => (RULE_SUCCESS, 0, (0, 0), 0, 443),
      472 => (RULE_MATCH, 0, (0, 0), 237, 352),
      473 => (RULE_MATCH, 0, (0, 0), 262, 364),
      474 => (RULE_MATCH, 0, (0, 0), 259, 366),
      475 => (RULE_SUCCESS, 0, (0, 0), 0, 443),
      476 => (RULE_MATCH, 0, (0, 0), 64, 327),
      477 => (RULE_SUCCESS, 0, (0, 0), 0, 444));

   Extensions : aliased constant Extension_Rules_Array := (
      (Ext_1'Access, 1, 6),
      (Ext_2'Access, 7, 12),
      (Ext_3'Access, 13, 18),
      (Ext_4'Access, 19, 24),
      (Ext_5'Access, 25, 30),
      (Ext_6'Access, 31, 36),
      (Ext_7'Access, 37, 42),
      (Ext_8'Access, 43, 48),
      (Ext_9'Access, 49, 54),
      (Ext_10'Access, 55, 60),
      (Ext_11'Access, 61, 66),
      (Ext_12'Access, 67, 72),
      (Ext_13'Access, 73, 78),
      (Ext_14'Access, 79, 84),
      (Ext_15'Access, 85, 90),
      (Ext_16'Access, 91, 96),
      (Ext_17'Access, 97, 102),
      (Ext_18'Access, 103, 108),
      (Ext_19'Access, 109, 110),
      (Ext_20'Access, 111, 111),
      (Ext_21'Access, 112, 112),
      (Ext_22'Access, 113, 115),
      (Ext_23'Access, 116, 122),
      (Ext_24'Access, 123, 124),
      (Ext_25'Access, 125, 138),
      (Ext_26'Access, 139, 141),
      (Ext_27'Access, 142, 145),
      (Ext_28'Access, 146, 146),
      (Ext_29'Access, 147, 152),
      (Ext_30'Access, 153, 153),
      (Ext_31'Access, 154, 154),
      (Ext_32'Access, 155, 157),
      (Ext_33'Access, 158, 162),
      (Ext_34'Access, 163, 163),
      (Ext_35'Access, 164, 165),
      (Ext_36'Access, 166, 169),
      (Ext_37'Access, 170, 171),
      (Ext_38'Access, 172, 174),
      (Ext_39'Access, 175, 176),
      (Ext_40'Access, 177, 185),
      (Ext_41'Access, 186, 187),
      (Ext_42'Access, 188, 189),
      (Ext_43'Access, 190, 195),
      (Ext_44'Access, 196, 198),
      (Ext_45'Access, 199, 200),
      (Ext_46'Access, 201, 203),
      (Ext_47'Access, 204, 207),
      (Ext_48'Access, 208, 211),
      (Ext_49'Access, 212, 213),
      (Ext_50'Access, 214, 215),
      (Ext_51'Access, 216, 217),
      (Ext_52'Access, 218, 221),
      (Ext_53'Access, 222, 224),
      (Ext_54'Access, 225, 228),
      (Ext_55'Access, 229, 232),
      (Ext_56'Access, 233, 234),
      (Ext_57'Access, 235, 244),
      (Ext_58'Access, 245, 245),
      (Ext_59'Access, 246, 247),
      (Ext_60'Access, 248, 255),
      (Ext_61'Access, 256, 257),
      (Ext_62'Access, 258, 277),
      (Ext_63'Access, 278, 280),
      (Ext_64'Access, 281, 284),
      (Ext_65'Access, 285, 286),
      (Ext_66'Access, 287, 288),
      (Ext_67'Access, 289, 290),
      (Ext_68'Access, 291, 292),
      (Ext_69'Access, 293, 300),
      (Ext_70'Access, 301, 303),
      (Ext_71'Access, 304, 309),
      (Ext_72'Access, 310, 310),
      (Ext_73'Access, 311, 313),
      (Ext_74'Access, 314, 317),
      (Ext_75'Access, 318, 323),
      (Ext_76'Access, 324, 325),
      (Ext_77'Access, 326, 328),
      (Ext_78'Access, 329, 330),
      (Ext_79'Access, 331, 334),
      (Ext_80'Access, 335, 336),
      (Ext_81'Access, 337, 339),
      (Ext_82'Access, 340, 341),
      (Ext_83'Access, 342, 343),
      (Ext_84'Access, 344, 345),
      (Ext_85'Access, 346, 348),
      (Ext_86'Access, 349, 350),
      (Ext_87'Access, 351, 358),
      (Ext_88'Access, 359, 360),
      (Ext_89'Access, 361, 361),
      (Ext_90'Access, 362, 369),
      (Ext_91'Access, 370, 371),
      (Ext_92'Access, 372, 373),
      (Ext_93'Access, 374, 379),
      (Ext_94'Access, 380, 385),
      (Ext_95'Access, 386, 387),
      (Ext_96'Access, 388, 389),
      (Ext_97'Access, 390, 392),
      (Ext_98'Access, 393, 397),
      (Ext_99'Access, 398, 399),
      (Ext_100'Access, 400, 401),
      (Ext_101'Access, 402, 403),
      (Ext_102'Access, 404, 406),
      (Ext_103'Access, 407, 413),
      (Ext_104'Access, 414, 415),
      (Ext_105'Access, 416, 417),
      (Ext_106'Access, 418, 419),
      (Ext_107'Access, 420, 424),
      (Ext_108'Access, 425, 425),
      (Ext_109'Access, 426, 427),
      (Ext_110'Access, 428, 429),
      (Ext_111'Access, 430, 430),
      (Ext_112'Access, 431, 432),
      (Ext_113'Access, 433, 440),
      (Ext_114'Access, 441, 441),
      (Ext_115'Access, 442, 442),
      (Ext_116'Access, 443, 444),
      (Ext_117'Access, 445, 446),
      (Ext_118'Access, 447, 448),
      (Ext_119'Access, 449, 450),
      (Ext_120'Access, 451, 453),
      (Ext_121'Access, 454, 455),
      (Ext_122'Access, 456, 456),
      (Ext_123'Access, 457, 459),
      (Ext_124'Access, 460, 461),
      (Ext_125'Access, 462, 463),
      (Ext_126'Access, 464, 467),
      (Ext_127'Access, 468, 471),
      (Ext_128'Access, 472, 475),
      (Ext_129'Access, 476, 477));

   Patterns : aliased Matcher_Array_Access :=
      (null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null);

   Definition : constant Rules_List :=
      (Strings    => Strings'Access,
       Extensions => Extensions'Access,
       Rules      => Rules'Access,
       Patterns   => Patterns'Access);

end SPDX_Tool.Languages.Rules.Disambiguations;
